errors_reg4<- bsts.prediction.errors(model_reg, burn = 5000)
forecast_reg4 <- t(as.numeric(model_reg$original.series) - t(errors_reg4))
onestep.for.bsts <- colMeans(forecast_reg4)[67:114]
onestep.for.bsts <- ts( onestep.for.bsts, start = c(2003,2), frequency =4 )
ygdp <- dat.train[,3]
onestep.for.bsts.gdp <-  ygdp[(nrow(dat.train)-48):(nrow(dat.train)-1)]*(1+ (onestep.for.bsts)/100)
library(forecast)
accuracy(onestep.for.bsts.gdp[1:16], ygdp[1:16])
accuracy(onestep.for.bsts.gdp[1:16], gdpTest[1:16])
onestep.for.bsts.gdp
getwd()
pdf(paste("cumulative_errors",".pdf",sep=""), width = 11, height = 8)
CompareBstsModels(list("BSTS with regression" = model_reg,
"BSTS without regression"= model2,
"AR(1)" = model_ar1),
main = "cumulative absolute one step ahead prediction errors")
graphics.off()
dim(x)
plot(model_reg,"forecast.distribution",main="One-step ahead forecast")
pdf(paste("forecast_distribution",".pdf",sep=""), width = 11, height = 8)
plot(model_reg,"forecast.distribution",main="One-step ahead forecast")
graphics.off()
plot(model_reg,main="Posterior distribution of states")
pdf(paste("states_distribution",".pdf",sep=""), width = 11, height = 8)
plot(model_reg,main="Posterior distribution of states")
graphics.off()
plot(model_reg,main="Posterior distribution of states")
plot(model_reg, "state" ,main="Posterior distribution of states")
plot(model_reg,"forecast.distribution",main="One-step ahead forecast")
pdf(paste("forecast_distribution",".pdf",sep=""), width = 11, height = 8)
plot(model_reg,"forecast.distribution",main="One-step ahead forecast")
graphics.off()
plot(model_reg,"comp")
pdf(paste("components",".pdf",sep=""), width = 11, height = 8)
plot(model_reg,"comp")
graphics.off()
plot(model_reg,"comp")
pdf(paste("components",".pdf",sep=""), width = 14, height = 8)
plot(model_reg,"comp")
graphics.off()
plot(model_reg,"comp")
pdf(paste("cumulative_errors",".pdf",sep=""), width = 11, height = 8)
CompareBstsModels(list("BSTS with regression" = model_reg,
"BSTS without regression"= model2),
main = "cumulative absolute one step ahead prediction errors")
graphics.off()
CompareBstsModels(list("BSTS with regression" = model_reg,
"BSTS without regression"= model2),
main = "cumulative absolute one step ahead prediction errors")
plot(model_reg, "coefficients", inc=.03, burn = 1000, main = "coefficients")
debug(PlotBstsCoefficients)
plot(model_reg, "coefficients", inc=.03, burn = 1000, main = "coefficients")
plot(model_reg, "coefficients", inc=.03, burn = 1000, main = "coefficients")
PlotBstsCoefficients <- function(bsts.object,
burn = SuggestBurn(.1, bsts.object),
inclusion.threshold = 0,
number.of.variables = NULL,
...) {
## Creates a plot of the regression coefficients in the bsts.object.
## This is a wrapper for plot.lm.spike from the BoomSpikeSlab package.
## Args:
##   bsts.object:  An object of class 'bsts'
##   burn: The number of MCMC iterations to discard as burn-in.
##   inclusion.threshold: An inclusion probability that coefficients
##     must exceed in order to be displayed.
##   number.of.variables: If non-NULL this specifies the number of
##     coefficients to plot, taking precedence over
##     inclusion.threshold.
## Returns:
##   Invisibly returns a list with the following elements:
##   barplot: The midpoints of each bar, which is useful for adding
##     to the plot
##   inclusion.prob: The marginal inclusion probabilities of each
##     variable, ordered smallest to largest (the same ordering as
##     the plot).
##   positive.prob: The probability that each variable has a
##     positive coefficient, in the same order as inclusion.prob.
##   permutation: The permutation of beta that puts the coefficients
##     in the same order as positive.prob and inclusion.prob.  That
##     is: beta[, permutation] will have the most significant
##     coefficients in the right hand columns.
stopifnot(inherits(bsts.object, "bsts"))
if (is.null(bsts.object$coefficients)) {
stop("no coefficients to plot in PlotBstsCoefficients")
}
return(invisible(
PlotMarginalInclusionProbabilities(
bsts.object$coefficients,
burn = burn,
inclusion.threshold = inclusion.threshold,
number.of.variables = number.of.variables,
...)))
}
plot.lm.spike(tmp, burn=burn, inclusion.threshold=inclusion.threshold,number.of.variables = number.of.variables, ...)
getwd()
plot(model_reg, "coefficients", inc=.3, burn = 1000, main = "coefficients")
names(dat.train)
plot( index(dat.train), dat.train[,c(2,35)])
dat.train[,c(2,35)]
index(dat.train)
plot( dat.train[,c(2,35)])
plot( dat.train[,c(2,38)])
source("E:\\Dropbox\\phd\\writing\\rawcode\\plot_incremental_fit.R")
dim(z)
dim(trend)
dim(y)
names(b)
y
b <- summary(model_reg)$coef[c(1:7),1]
temp <- model_reg$state.contributions
num <- dim(temp)[[3]]
trend <- rep(NA,num)
temp
for (t in 1:num) trend[t] <- mean(temp[,1,t])
z <- as.matrix(x[,names(b)])%*%diag(b)
npred=7
is.seasonal  <- 0
if(is.seasonal) {
seasonal <- rep(NA,num)
for (t in 1:num) seasonal[t] <- mean(temp[,2,t])
nplots <- npred+3
df <- data.frame(y,trend,seasonal,z)
names(df) <- c("GDP","trend","seasonal",names(b))
} else {
nplots <- npred+2
df <- data.frame(y,trend,z)
names(df) <- c("GDP","trend",names(b))
}
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
pdf("E:\\Dropbox\\phd\\writing\\figure\\IncrementalFit.pdf")
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
graphics.off()
b <- summary(model_reg)$coef[c(1:15),1]
temp <- model_reg$state.contributions
# head(temp); names(temp); str(temp)
num <- dim(temp)[[3]]
#  component     : chr [1:2] "trend" "regression"
trend <- rep(NA,num)
#plot(trend)
for (t in 1:num) trend[t] <- mean(temp[,1,t])
#  component     : chr [1:2] "trend" "regression"
z <- as.matrix(x[,names(b)])%*%diag(b)
#plot(z)
# show how many predictor to report
npred=15
is.seasonal  <- 0
# need to add seasonal component if seasonal
if(is.seasonal) {
seasonal <- rep(NA,num)
for (t in 1:num) seasonal[t] <- mean(temp[,2,t])
nplots <- npred+3
df <- data.frame(y,trend,seasonal,z)
names(df) <- c("GDP","trend","seasonal",names(b))
} else {
nplots <- npred+2
df <- data.frame(y,trend,z)
names(df) <- c("GDP","trend",names(b))
}
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
b <- summary(model_reg)$coef[c(1:7),1]
temp <- model_reg$state.contributions
# head(temp); names(temp); str(temp)
num <- dim(temp)[[3]]
#  component     : chr [1:2] "trend" "regression"
trend <- rep(NA,num)
#plot(trend)
for (t in 1:num) trend[t] <- mean(temp[,1,t])
#  component     : chr [1:2] "trend" "regression"
z <- as.matrix(x[,names(b)])%*%diag(b)
#plot(z)
# show how many predictor to report
npred=7
is.seasonal  <- 0
# need to add seasonal component if seasonal
if(is.seasonal) {
seasonal <- rep(NA,num)
for (t in 1:num) seasonal[t] <- mean(temp[,2,t])
nplots <- npred+3
df <- data.frame(y,trend,seasonal,z)
names(df) <- c("GDP","trend","seasonal",names(b))
} else {
nplots <- npred+2
df <- data.frame(y,trend,z)
names(df) <- c("GDP","trend",names(b))
}
# head(df)
# tail(df)
# #plot(df)
pdf("E:\\Dropbox\\phd\\writing\\figure\\IncrementalFit.pdf")
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
graphics.off()
pdf("IncrementalFit.pdf")
PlotIncrementalFit(df,response.colname="GDP",component.colnames=names(df)[2:nplots],png.filename=plot.name)
graphics.off()
pdf("IncrementalFit.pdf")
PlotIncrementalFit(df,response.colname="GDP growth",component.colnames=names(df)[2:nplots],png.filename=plot.name)
graphics.off()
trend
str(temp)
plot(dat.train[,c(2,35)])
names(dat.train[,c(2,35)])
plot(dat.train[,c(2,38)])
names(dat.train[,c(2,19)])
names(dat.train[,c(2,20)])
plot(dat.train[,c(2,20)])
names(dat.train[,c(2,12,20)])
names(dat.train[,c(2,11,20)])
plot(dat.train[,c(2,11,20)])
plot(dat.train[,c(2,35,38)])
load("U:\\Users\\jonduan\\Dropbox\\phd\\data\\model_reg_whouse.RData")
load("e:\\Dropbox\\phd\\data\\model_reg_whouse.RData")
accuracy(onestep.for.arima.gdp[1:16], gdpTest[1:16])
errors_reg4_wh<- bsts.prediction.errors(model_reg_wh, burn = 5000)
forecast_reg4_wh <- t(as.numeric(model_reg_wh$original.series) - t(errors_reg4_wh))
onestep.for.bsts.wh <- colMeans(forecast_reg4_wh)[92:139]
onestep.for.bsts.gdp.wh <-  dat.train[(nrow(dat.train)-48):(nrow(dat.train)-1),3]*(1+ (onestep.for.bsts.wh)/100)
dat.train[(nrow(dat.train)-48):(nrow(dat.train)-1),3]
onestep.for.bsts.gdp.wh
accuracy(onestep.for.bsts.gdp.wh[1:16], gdpTest[1:16])
onestep.for.bsts.gdp.wh[1:16]
gdpTest[1:16]
accuracy(onestep.for.boost.gdp[1:16], gdpTest[1:16])
onestep.for.boost.gdp[1:16]
onestep.for.bsts.gdp[1:16]
onestep.for.bsts.gdp.wh <- ts(onestep.for.bsts.gdp.wh, start = c(2003,2))
onestep.for.bsts.gdp.wh
onestep.for.bsts.gdp.wh <- ts(onestep.for.bsts.gdp.wh, start = c(2003,2), frequency = 4)
onestep.for.bsts.gdp.wh
accuracy(onestep.for.bsts.gdp.wh[1:16], gdpTest[1:16])
accuracy(onestep.for.arima.gdp[1:16], gdpTest[1:16])
accuracy(onestep.for.bsts.gdp.wh[17:32], gdpTest[17:32])
accuracy(onestep.for.bsts.gdp[17:32], gdpTest[17:32])
accuracy(onestep.for.bsts.gdp.wh[33:48], gdpTest[33:48])
accuracy(onestep.for.boost.gdp[33:48], gdpTest[33:48])
